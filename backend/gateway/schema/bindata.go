// Code generated by go-bindata.
// sources:
// schema/schema.graphql
// schema/types/issue.graphql
// schema/types/milestone.graphql
// schema/types/pagination.graphql
// schema/types/project.graphql
// schema/types/user.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x6e\x03\x21\x10\x45\xfb\x39\xc5\xb7\xd2\x90\x2b\xd0\xa6\x72\x61\x29\x51\xe4\x03\x20\x67\xe4\x10\x79\x81\x0c\x43\xac\x55\xb4\x77\x8f\x16\x36\x98\x62\x2b\xf8\xf3\xfe\x63\xc8\x97\x4f\x9e\x1c\x7e\x09\xf8\x2e\x2c\xb3\xc5\xdb\x7a\x10\x30\x15\x75\xea\x63\xb0\x38\x6d\x37\x5a\x88\x74\x4e\xdc\x2a\xd5\xf9\xf1\x7c\x67\x31\xcf\x16\xe7\xcc\x72\x20\xa0\x64\x16\x73\x8b\x57\x1f\x2c\xde\x55\x7c\xb8\x1e\x06\x9a\x24\x7e\xf1\x45\x4d\x70\x13\x77\x8e\x78\x0f\x2c\x63\xfd\xb5\xd5\xfa\xc2\xff\x1f\xd4\x9d\x1b\x7c\x11\x76\xca\xc6\x87\x54\xd4\xa2\xa5\x0d\x1d\xd7\xd9\xf8\x0e\x70\xf2\x37\xce\x1a\x03\xef\x69\x1d\x76\xb1\x4f\x08\x78\xc2\x31\xe7\xb2\x2b\x56\xd0\xa5\x9a\x1e\xc2\x39\x7d\x0c\x42\x4b\x7b\xc2\x42\x7f\x01\x00\x00\xff\xff\x3c\x14\x1c\x51\x85\x01\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 389, mode: os.FileMode(420), modTime: time.Unix(1585061076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesIssueGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x4e\xf3\x30\x10\x85\xf7\x3e\xc5\xfb\xf5\xef\x73\x80\xec\xaa\xa6\x0b\x4b\x88\x22\x05\x0e\x90\xc6\x53\x32\x28\xd8\x96\x67\xb2\x88\x50\xef\x8e\x6c\x0b\x1a\xa0\x0b\xc4\x6e\x32\x79\xe3\xf7\xcd\x1b\x5d\x23\xc1\x8a\x2c\x84\x37\x03\xb0\x6b\x61\xbb\x7f\xb9\x2a\xa5\xd7\x5c\x2b\xeb\x4c\x2d\x7a\x4d\xec\x9f\x73\xe3\x14\xdc\xba\xfd\x1e\x13\x0d\x4a\x6e\xa7\xd7\xe6\xc5\x18\xf2\xcb\x6b\x7d\xbb\xd7\x41\xab\xc1\x7f\xec\x3c\xb8\xf8\xe9\x34\x28\x58\x20\xca\xf3\x8c\x10\xc9\x1b\xe0\xf8\x70\xb8\xbf\x21\x9b\x06\xc1\x89\xc8\x63\x9c\x83\x90\x33\xc0\xfe\xee\xd8\x1f\xba\x6c\xc3\x3e\x2e\x8a\x7d\x41\x28\x6e\xb6\x34\xaa\xdb\xe3\x44\x88\x29\xbc\xd0\xa8\xb0\x1d\xc2\x19\x3a\x11\x12\xc5\x20\xac\x21\xad\x8d\xc1\xc7\x7f\xfb\xb9\x7b\x1d\x2b\x5b\xe3\x1c\x52\x19\x29\x30\xcd\xad\x30\xaa\x3a\x47\xf2\x55\x0c\x47\x32\x26\x8e\xca\xc1\x37\xdf\x42\xbb\x72\x3f\x45\xf7\x93\x7b\x1b\xfe\xef\x61\xfe\xca\x02\x48\xbe\x4f\xbb\xb9\x95\xb9\x98\xf7\x00\x00\x00\xff\xff\x0a\x10\x07\x40\x1a\x02\x00\x00")

func schemaTypesIssueGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesIssueGraphql,
		"schema/types/issue.graphql",
	)
}

func schemaTypesIssueGraphql() (*asset, error) {
	bytes, err := schemaTypesIssueGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/issue.graphql", size: 538, mode: os.FileMode(420), modTime: time.Unix(1582451082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesMilestoneGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\xcd\xaa\xc2\x40\x0c\x46\xf7\xf3\x14\xdf\x7d\x8d\x6e\x6f\x41\xba\x10\x14\x9f\x60\xe8\x7c\x48\x44\xd3\x21\x93\x2e\x4a\xe9\xbb\x4b\xfd\xa9\x15\x5c\xe8\x2e\x39\x84\x9c\xe3\x43\x26\xb6\x72\x66\xf1\x4e\x89\x31\x00\x92\x2a\x34\xf5\x5f\x00\xb2\x75\x27\xb6\x5e\x61\x77\x1f\x66\xa6\xf1\xc2\x0a\x07\x37\xd1\xe3\xbc\x27\x96\xd6\x24\xbb\x74\xfa\xc4\x01\x28\x1e\xcd\xeb\xe8\x5c\x31\x6a\x7a\x23\x53\x08\xa2\xb9\x77\xfc\x1b\xa3\x73\x89\x68\x6e\x70\xfc\xda\xf5\xa8\x6c\xd2\xfa\xf4\xa7\x80\x0d\x7d\xb1\xef\x7b\xda\xf0\x4a\xf8\xf0\x7c\x0a\xd7\x00\x00\x00\xff\xff\x31\x7e\xfb\x6b\x35\x01\x00\x00")

func schemaTypesMilestoneGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesMilestoneGraphql,
		"schema/types/milestone.graphql",
	)
}

func schemaTypesMilestoneGraphql() (*asset, error) {
	bytes, err := schemaTypesMilestoneGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/milestone.graphql", size: 309, mode: os.FileMode(420), modTime: time.Unix(1585101161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesPaginationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x48\x4c\x4f\xf5\xcc\x4b\xcb\x57\xa8\xe6\x52\x50\x28\x2e\x49\x2c\x2a\x71\x2e\x2d\x2a\xce\x2f\xb2\x52\x08\x2e\x29\xca\xcc\x4b\xe7\x52\x50\x48\xcd\x4b\xc1\x10\xcb\x48\x2c\xf6\x4b\xad\x28\x01\xe9\xb6\x52\x70\xca\xcf\xcf\x49\x4d\xcc\x53\x84\x88\x07\x14\xa5\x96\x65\xe6\x97\x16\xa3\xc9\xd5\x72\x01\x02\x00\x00\xff\xff\x82\xe4\x59\xe2\x70\x00\x00\x00")

func schemaTypesPaginationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesPaginationGraphql,
		"schema/types/pagination.graphql",
	)
}

func schemaTypesPaginationGraphql() (*asset, error) {
	bytes, err := schemaTypesPaginationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/pagination.graphql", size: 112, mode: os.FileMode(420), modTime: time.Unix(1584779905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesProjectGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xcb\x4e\x03\x31\x0c\xbc\xe7\x2b\x06\xf5\xce\x07\xe4\x56\xb5\x08\xed\xad\x12\x70\x42\x1c\xc2\xc6\xd9\x06\x95\x78\xe5\xb8\xaa\x10\xea\xbf\xa3\xa4\x9b\xee\xaa\xc0\x29\xf1\x63\x3c\x9e\xb1\x7e\x8d\x84\x9d\xf0\x07\xf5\x8a\x6f\x03\x44\x6f\xd1\x6d\xef\x0c\x90\xdc\x27\x59\x3c\xa9\xc4\x34\x94\x98\x4f\x89\xc4\xe2\x25\x93\x94\xd0\x53\xee\x25\x8e\x1a\x39\xb5\x2e\x03\xf4\x42\x4e\xc9\xaf\x75\x46\x9e\x8d\x59\xb2\x6c\x38\x25\xea\x0b\xac\xf2\x91\x1f\x28\x5b\xbc\x4e\xd5\x07\x3f\xd0\x5b\x21\x67\xbf\x4c\x97\xd4\xe8\x06\xea\x52\x60\x8b\xdd\xf4\x2b\x6b\x28\xab\x3b\x6c\xf8\x98\xd4\xa2\x4b\xfa\x8b\xae\x0c\xac\x44\xfd\x51\x32\xcb\x55\x1c\x7b\xb2\xad\xa7\x60\x56\xe8\xd2\x78\x54\x63\x62\x79\xb0\xa9\x3a\xa6\x7a\xad\xd4\x21\x2b\x3c\xef\x09\xdd\x16\x1c\xa0\x7b\xba\x78\x82\xc0\x52\xa3\x44\x27\x8c\x17\xc8\x7d\x33\xac\xf3\x75\xaf\x2b\xb6\xb8\xda\xd0\x37\xfd\xb7\x86\xaf\xb0\x46\xde\xb3\xe8\xd2\xeb\x7f\xb0\x7f\x5d\xe3\xdc\xc4\x3c\x92\x4e\x4a\xf2\x2c\x25\x44\xc9\xda\x76\x3b\xb8\xf9\xef\x82\x96\x3b\x5f\x4f\xfa\x4e\x81\x85\x16\x53\x7f\x02\x00\x00\xff\xff\xf1\xc7\xa3\x46\x34\x02\x00\x00")

func schemaTypesProjectGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesProjectGraphql,
		"schema/types/project.graphql",
	)
}

func schemaTypesProjectGraphql() (*asset, error) {
	bytes, err := schemaTypesProjectGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/project.graphql", size: 564, mode: os.FileMode(420), modTime: time.Unix(1584779669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesUserGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xc8\x31\x0a\xc2\x40\x10\x05\xd0\x7e\x4f\xf1\xd3\xe9\x15\xa6\x55\x90\x74\x82\x78\x80\x10\xbf\x32\xb2\x99\x5d\x66\x67\x0b\x11\xef\x2e\x81\x14\x62\xfb\xe2\x55\x89\x6b\xa3\xe3\x9d\x00\xbd\x09\xc6\xe3\x90\x80\x7b\xcf\xd9\xa6\x85\x82\x4b\xb8\xda\x63\xb5\xde\xe8\xff\xc6\x65\xd2\xfc\x0b\xd5\xcb\x93\x73\xb4\x9d\x5a\xed\x21\x38\x31\xce\x1b\x8d\xab\x0c\x7b\xc1\x06\x87\x62\xc6\x39\xb4\x58\xfa\xa4\x6f\x00\x00\x00\xff\xff\x5e\x0b\xab\xeb\x89\x00\x00\x00")

func schemaTypesUserGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesUserGraphql,
		"schema/types/user.graphql",
	)
}

func schemaTypesUserGraphql() (*asset, error) {
	bytes, err := schemaTypesUserGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/user.graphql", size: 137, mode: os.FileMode(420), modTime: time.Unix(1584779174, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.graphql": schemaSchemaGraphql,
	"schema/types/issue.graphql": schemaTypesIssueGraphql,
	"schema/types/milestone.graphql": schemaTypesMilestoneGraphql,
	"schema/types/pagination.graphql": schemaTypesPaginationGraphql,
	"schema/types/project.graphql": schemaTypesProjectGraphql,
	"schema/types/user.graphql": schemaTypesUserGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
		"types": &bintree{nil, map[string]*bintree{
			"issue.graphql": &bintree{schemaTypesIssueGraphql, map[string]*bintree{}},
			"milestone.graphql": &bintree{schemaTypesMilestoneGraphql, map[string]*bintree{}},
			"pagination.graphql": &bintree{schemaTypesPaginationGraphql, map[string]*bintree{}},
			"project.graphql": &bintree{schemaTypesProjectGraphql, map[string]*bintree{}},
			"user.graphql": &bintree{schemaTypesUserGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

