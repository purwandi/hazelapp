// Code generated by go-bindata.
// sources:
// schema/schema.graphql
// schema/types/project.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x4f\xca\xc2\x30\x10\x47\xf7\x73\x8a\x5f\xf8\x36\x29\x7c\x27\xc8\x56\x37\x2e\x04\xc5\x13\x84\x74\xd0\x08\xf9\x63\x32\x5d\x14\xe9\xdd\xa5\x8d\xa6\xab\x79\x0c\x6f\x1e\x53\xdd\x83\x83\xc5\x9b\x80\xd7\xc4\x65\x36\xb8\xae\x83\x80\x30\x89\x15\x9f\xa2\xc1\xf9\x4b\xb4\x10\xc9\x9c\xb9\x29\xdb\x4d\x2e\xe9\xc9\x4e\xaa\x1e\x0c\x2e\x8d\x0f\x29\x46\x76\xab\xaf\x76\x41\xfb\xd1\xe0\x74\x54\xbb\xa6\x7a\xed\x97\xdf\x82\x7f\x3d\x53\xd8\x0a\xeb\x68\x03\x1b\xdc\xa4\xf8\x78\x57\xff\x18\xb9\xba\xe2\x73\xfb\xab\x6d\x07\xf4\x26\x2d\xf4\x09\x00\x00\xff\xff\xe6\x77\xc1\xd6\xd0\x00\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 208, mode: os.FileMode(420), modTime: time.Unix(1582351447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesProjectGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x0a\x02\x41\x0c\x44\xfb\x7c\xc5\xf8\x1b\xdb\xc9\x69\x71\x9d\x60\x29\x16\xc7\x26\x1c\x2b\x9a\x1c\xd9\x5c\x21\x72\xff\x2e\x2b\x9e\x8a\x65\x86\x79\x2f\x13\xf7\x49\x70\x70\xbb\x48\x0e\x3c\x08\x28\x9c\xd0\xef\x36\x04\xe8\x70\x93\x84\x63\x78\xd1\xb1\xdd\x2c\x35\x7b\x99\xa2\x98\xae\x31\x01\xd9\x65\x08\xe1\x6d\x7c\xab\x0b\xd1\xaf\xb6\x33\x55\xc9\x0d\x7b\x3d\x08\x8b\xe1\xda\xd9\xac\x91\xd0\x6b\x34\xb3\xf0\x28\x35\xe1\xf4\x06\xf6\x3c\xca\xf9\xdf\xd2\xc2\x86\xe7\xd9\xab\xf9\x67\xa3\xb1\xa4\xb5\x42\x0b\x3d\x03\x00\x00\xff\xff\x08\xdf\xa7\x3c\xcf\x00\x00\x00")

func schemaTypesProjectGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesProjectGraphql,
		"schema/types/project.graphql",
	)
}

func schemaTypesProjectGraphql() (*asset, error) {
	bytes, err := schemaTypesProjectGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/project.graphql", size: 207, mode: os.FileMode(420), modTime: time.Unix(1582347194, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.graphql": schemaSchemaGraphql,
	"schema/types/project.graphql": schemaTypesProjectGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
		"types": &bintree{nil, map[string]*bintree{
			"project.graphql": &bintree{schemaTypesProjectGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

