// Code generated by go-bindata.
// sources:
// schema/schema.graphql
// schema/types/issue.graphql
// schema/types/milestone.graphql
// schema/types/project.graphql
// schema/types/user.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x4b\xc4\x30\x10\x85\xef\xf3\x2b\xa6\x78\xc9\xfe\x85\x5c\x15\xa4\x87\x05\x45\xf6\x24\x1e\x4a\x77\x58\x23\xdb\x24\x66\x26\xca\x22\xfd\xef\x92\xa4\x49\x7b\xe8\x9e\x3a\xf3\xde\xfb\xa6\x2f\x3c\x7e\xd2\x34\xe0\x1f\x20\x7e\x47\x0a\x37\x8d\xaf\xe9\x03\x88\x53\x94\x41\x8c\xb3\x1a\x8f\xcb\x04\x33\x80\xdc\x3c\x95\x48\x66\x7e\x0c\xfd\x52\x50\x07\x8d\x27\xa6\xd0\x01\x62\x64\x0a\xea\xea\x2e\xc6\x6a\x7c\x93\x60\xec\xa5\xdb\xb8\x3e\xb8\x2f\x1a\x85\x13\xf1\x52\xe6\x47\x67\x2d\x8d\xe9\x7e\x0a\x3c\xd4\x88\x32\x67\x8d\xfd\x53\xb7\x06\x8b\x3d\x99\x2b\xb1\x38\x4b\xac\x8c\xf5\x51\x34\x3e\x93\x1c\xab\x98\x9b\xf5\x49\x3f\xe0\x7b\x53\x3f\x5a\xf3\xfa\x94\x5c\xbe\x16\x08\x34\x08\xd5\x6b\x65\x5b\xac\x7c\x69\x53\x21\x37\xe8\x99\x23\xed\x41\xd9\x68\x48\xde\x56\xe0\xe4\xcf\x1b\xa0\x6c\xf7\x80\x56\x7c\xef\x2f\xcd\x6c\x60\x53\x60\x86\xff\x00\x00\x00\xff\xff\x73\x15\x51\xb3\xd0\x01\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 464, mode: os.FileMode(420), modTime: time.Unix(1584696029, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesIssueGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x4e\xf3\x30\x10\x85\xf7\x3e\xc5\xfb\xf5\xef\x73\x80\xec\xaa\xa6\x0b\x4b\x88\x22\x05\x0e\x90\xc6\x53\x32\x28\xd8\x96\x67\xb2\x88\x50\xef\x8e\x6c\x0b\x1a\xa0\x0b\xc4\x6e\x32\x79\xe3\xf7\xcd\x1b\x5d\x23\xc1\x8a\x2c\x84\x37\x03\xb0\x6b\x61\xbb\x7f\xb9\x2a\xa5\xd7\x5c\x2b\xeb\x4c\x2d\x7a\x4d\xec\x9f\x73\xe3\x14\xdc\xba\xfd\x1e\x13\x0d\x4a\x6e\xa7\xd7\xe6\xc5\x18\xf2\xcb\x6b\x7d\xbb\xd7\x41\xab\xc1\x7f\xec\x3c\xb8\xf8\xe9\x34\x28\x58\x20\xca\xf3\x8c\x10\xc9\x1b\xe0\xf8\x70\xb8\xbf\x21\x9b\x06\xc1\x89\xc8\x63\x9c\x83\x90\x33\xc0\xfe\xee\xd8\x1f\xba\x6c\xc3\x3e\x2e\x8a\x7d\x41\x28\x6e\xb6\x34\xaa\xdb\xe3\x44\x88\x29\xbc\xd0\xa8\xb0\x1d\xc2\x19\x3a\x11\x12\xc5\x20\xac\x21\xad\x8d\xc1\xc7\x7f\xfb\xb9\x7b\x1d\x2b\x5b\xe3\x1c\x52\x19\x29\x30\xcd\xad\x30\xaa\x3a\x47\xf2\x55\x0c\x47\x32\x26\x8e\xca\xc1\x37\xdf\x42\xbb\x72\x3f\x45\xf7\x93\x7b\x1b\xfe\xef\x61\xfe\xca\x02\x48\xbe\x4f\xbb\xb9\x95\xb9\x98\xf7\x00\x00\x00\xff\xff\x0a\x10\x07\x40\x1a\x02\x00\x00")

func schemaTypesIssueGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesIssueGraphql,
		"schema/types/issue.graphql",
	)
}

func schemaTypesIssueGraphql() (*asset, error) {
	bytes, err := schemaTypesIssueGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/issue.graphql", size: 538, mode: os.FileMode(420), modTime: time.Unix(1582451082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesMilestoneGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xcc\xb1\x0a\xc2\x50\x0c\x85\xe1\x3d\x4f\x71\x7c\x8d\xae\x0a\x72\x07\x07\xf1\x09\x4a\xef\x41\x22\x9a\x1b\xd2\x74\x28\xc5\x77\x17\x05\xdb\xc5\xd1\x31\x3f\x39\x5f\xce\x4e\x9c\xf4\xce\x31\x9b\x11\x8b\x00\x5a\x3b\x94\xc3\x4e\x00\xeb\x1f\xec\x70\xc9\x50\xbb\xbe\xef\xca\x71\x08\xf5\xd4\x66\xdf\x2c\x80\x47\xbb\x71\xc8\x52\xb7\xd7\xa7\x88\x9a\x4f\x89\x7d\xb0\x4f\xae\x7e\xf9\xc4\xe5\x2f\xf4\x91\xb9\xba\xe7\x89\x31\x6f\xf8\xcf\xd9\x2b\x00\x00\xff\xff\x96\xce\x27\x33\xea\x00\x00\x00")

func schemaTypesMilestoneGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesMilestoneGraphql,
		"schema/types/milestone.graphql",
	)
}

func schemaTypesMilestoneGraphql() (*asset, error) {
	bytes, err := schemaTypesMilestoneGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/milestone.graphql", size: 234, mode: os.FileMode(420), modTime: time.Unix(1582938477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesProjectGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xc1\x4e\xc3\x40\x0c\x44\xef\xfe\x8a\x41\xbd\xf3\x01\xb9\x55\x29\x87\xdc\x90\x80\x13\xe2\x10\xed\xba\xc9\x22\xb0\x23\xaf\xa3\x0a\xa1\xfc\x3b\xda\x6d\x53\xaa\x08\x8e\x76\xe6\x79\x66\xb2\xfe\x35\x31\x1e\x4d\xdf\x39\x38\xbe\x09\x48\xb1\x41\x77\xb8\x23\x40\xfa\x4f\x6e\xf0\xe4\x96\x64\x28\xb3\x9e\x84\xad\xc1\x4b\x66\x2b\x63\xe4\x1c\x2c\x4d\x9e\x54\x56\x15\x01\xc1\xb8\x77\x8e\x7b\xff\x25\x17\xa2\x24\xd3\xec\x68\xeb\xb7\x8b\x59\x57\x57\xc5\x71\x87\xe7\x91\xd1\x1d\xa0\x47\xf8\xc8\x67\x1f\x1c\xd5\xea\x24\x7c\xc2\x74\x46\xee\xd7\x10\x5d\xc9\x28\x7e\x65\x4b\xd2\x95\xde\xe8\xb7\x25\x76\xd8\x23\x8f\x6a\x7e\x9b\xff\x1f\xf6\xaf\x86\x0b\xd1\xed\x2f\x6b\x55\x84\x43\xbd\x51\xaa\xb8\x7a\xff\xd1\xea\x2c\x5e\x03\x16\x43\x8e\x03\xe7\x06\xaf\x17\xe0\x21\x0e\xfc\xb6\xbd\x52\x96\x95\x0f\xb3\x65\xb5\xeb\x03\x68\xe4\x66\xd5\xd0\x42\x3f\x01\x00\x00\xff\xff\x73\x47\xa8\xb0\xac\x01\x00\x00")

func schemaTypesProjectGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesProjectGraphql,
		"schema/types/project.graphql",
	)
}

func schemaTypesProjectGraphql() (*asset, error) {
	bytes, err := schemaTypesProjectGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/project.graphql", size: 428, mode: os.FileMode(420), modTime: time.Unix(1584681596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesUserGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2d\x4e\x2d\x52\xa8\xe6\x52\x50\xc8\x4c\xb1\x52\xf0\x74\x51\xe4\x52\x50\x48\x2b\xcd\xc9\xc9\x4b\xcc\x4d\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x07\x89\x95\x16\xa7\x16\xa1\x8b\xa5\xe6\x26\x66\xe6\x20\x04\x6a\xb9\x00\x01\x00\x00\xff\xff\xb0\x78\xf5\x13\x51\x00\x00\x00")

func schemaTypesUserGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesUserGraphql,
		"schema/types/user.graphql",
	)
}

func schemaTypesUserGraphql() (*asset, error) {
	bytes, err := schemaTypesUserGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/user.graphql", size: 81, mode: os.FileMode(420), modTime: time.Unix(1584604003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.graphql": schemaSchemaGraphql,
	"schema/types/issue.graphql": schemaTypesIssueGraphql,
	"schema/types/milestone.graphql": schemaTypesMilestoneGraphql,
	"schema/types/project.graphql": schemaTypesProjectGraphql,
	"schema/types/user.graphql": schemaTypesUserGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
		"types": &bintree{nil, map[string]*bintree{
			"issue.graphql": &bintree{schemaTypesIssueGraphql, map[string]*bintree{}},
			"milestone.graphql": &bintree{schemaTypesMilestoneGraphql, map[string]*bintree{}},
			"project.graphql": &bintree{schemaTypesProjectGraphql, map[string]*bintree{}},
			"user.graphql": &bintree{schemaTypesUserGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

