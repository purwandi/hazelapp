// Code generated by go-bindata.
// sources:
// schema/schema.graphql
// schema/types/issue.graphql
// schema/types/milestone.graphql
// schema/types/pagination.graphql
// schema/types/project.graphql
// schema/types/user.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x6e\x85\x20\x10\x45\xf7\xf3\x15\xd7\x1d\xfd\x05\xb6\x5d\xb9\x30\x69\xd3\xf4\x03\x88\x99\x58\x1a\x05\x3b\x0c\x35\xe6\xc5\x7f\x7f\x11\x7d\xc4\x85\x2b\x98\x39\xf7\x70\x49\xfd\x0f\x4f\x0e\x0f\x02\xfe\x32\xcb\x6a\xf1\xb9\x1f\x04\x4c\x59\x9d\xfa\x18\x2c\xba\xf3\x46\x1b\x91\xae\x33\x1f\x91\xe2\xfc\x7b\x5e\x58\xcc\x9b\xc5\x77\x62\x69\x08\xc8\x89\xc5\x8c\x71\xf0\xc1\xe2\x4b\xc5\x87\xa1\xb9\xd0\x59\xe2\x2f\xf7\x6a\x82\x9b\xb8\x72\xc4\x25\xb0\x5c\xe3\x1f\x47\xac\x16\xbe\x7e\x50\x3a\x4f\xf8\x2e\xec\x94\x8d\x0f\x73\x56\x8b\x63\x3a\x51\xbb\xef\xae\xef\x00\x9d\x1f\x39\x69\x0c\x7c\xa7\x55\x58\xc5\xba\x21\xa0\x4d\x29\xdf\x6a\x05\x54\xa5\x4c\xb4\xd1\x33\x00\x00\xff\xff\x34\x4b\xa3\x06\x52\x01\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 338, mode: os.FileMode(420), modTime: time.Unix(1585108725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesIssueGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xc1\xae\xd3\x30\x10\x45\xf7\xfe\x8a\xfb\xc4\xbe\x1f\xe0\x1d\x4a\x2b\x14\x09\x78\x95\xca\x5b\x21\x16\x4e\x3c\x49\x8c\x52\x8f\x65\x4f\x16\x15\xe2\xdf\x91\xed\x36\x69\xa1\x48\x88\xdd\x64\x32\xd7\x73\xc6\x77\x2c\x97\x40\x68\x53\x5a\x08\x3f\x14\xe0\xac\x46\xbb\x7f\x51\x40\x88\xfc\x9d\x7a\xd1\x38\xd6\x20\xe7\xce\x6e\xa6\x24\xec\x49\xe3\xd3\x2d\x54\x80\x59\x64\xe2\xa8\xf1\x96\x28\xe6\x32\xbf\x9c\x3b\x8a\x1a\xad\x2f\x2a\x71\x32\x93\xc6\x49\xa2\xf3\x63\x4e\x74\x6c\x2f\xb7\x6f\x05\x24\x31\x42\xba\x42\x9c\x72\xfc\xa2\x7e\x2a\xb5\x81\x35\xec\x3d\xf5\xe2\xd8\x17\x44\xb2\x23\x25\x8d\xaf\xe5\xdf\xc1\x8e\xf4\x2d\xb7\x64\xbb\x25\x73\x22\x98\x91\x5a\x3f\xb0\xc6\xf1\x1a\x15\x14\x16\x33\x37\xbc\x78\xb9\xd2\x3d\x34\xca\x87\x95\x16\xfd\x12\x53\x1e\xa8\xde\x44\x3e\xfb\x8a\x97\xeb\xc9\x2f\xe7\x3b\xd8\x22\x78\x87\xf7\x1e\xae\xdc\xa2\x4c\x46\xe0\x12\x92\xb8\x79\x06\x07\xf2\x0a\x78\x3d\x1e\x3e\x3f\x29\x9b\x4c\x42\x47\xe4\xd1\xcf\x9c\xc8\x2a\xa0\xf9\xf8\x7a\x3a\xec\x73\x1b\xe7\xc3\x22\x68\x22\x19\xa1\xd2\xad\x2d\x89\xda\xed\xcb\x44\x37\x83\xd0\xee\xc1\x03\x64\x22\x44\x0a\x9c\x9c\x70\xbc\xec\x36\x03\xdb\xd5\xd1\x2a\x5b\x3d\xfc\xab\x70\xad\xc8\xd2\xd5\xa5\xaa\x2e\x5e\x62\xe0\x58\x74\x65\x94\xdd\x33\x8b\x6b\x75\x36\xfa\xb1\x18\x96\x52\x1f\x5d\xc8\x6e\xee\x7e\x5f\x85\x75\xea\xb7\x60\xff\x9c\xda\x95\xdd\xac\x2b\xf5\xef\x30\xff\xcb\xf2\x6c\x2f\x37\xc0\x0f\x24\x25\x9d\x36\xbc\xc1\xc5\x54\xb7\x4a\x01\xb3\xd9\x62\x33\x48\x7e\x0c\x2b\x4e\x47\x03\x47\xba\x1b\xfa\x57\x00\x00\x00\xff\xff\x97\xde\x37\x95\x83\x03\x00\x00")

func schemaTypesIssueGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesIssueGraphql,
		"schema/types/issue.graphql",
	)
}

func schemaTypesIssueGraphql() (*asset, error) {
	bytes, err := schemaTypesIssueGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/issue.graphql", size: 899, mode: os.FileMode(420), modTime: time.Unix(1585235282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesMilestoneGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\xcd\xaa\xc2\x40\x0c\x46\xf7\xf3\x14\xdf\x7d\x8d\x6e\x6f\x41\xba\x10\x14\x9f\x60\xe8\x7c\x48\x44\xd3\x21\x93\x2e\x4a\xe9\xbb\x4b\xfd\xa9\x15\x5c\xe8\x2e\x39\x84\x9c\xe3\x43\x26\xb6\x72\x66\xf1\x4e\x89\x31\x00\x92\x2a\x34\xf5\x5f\x00\xb2\x75\x27\xb6\x5e\x61\x77\x1f\x66\xa6\xf1\xc2\x0a\x07\x37\xd1\xe3\xbc\x27\x96\xd6\x24\xbb\x74\xfa\xc4\x01\x28\x1e\xcd\xeb\xe8\x5c\x31\x6a\x7a\x23\x53\x08\xa2\xb9\x77\xfc\x1b\xa3\x73\x89\x68\x6e\x70\xfc\xda\xf5\xa8\x6c\xd2\xfa\xf4\xa7\x80\x0d\x7d\xb1\xef\x7b\xda\xf0\x4a\xf8\xf0\x7c\x0a\xd7\x00\x00\x00\xff\xff\x31\x7e\xfb\x6b\x35\x01\x00\x00")

func schemaTypesMilestoneGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesMilestoneGraphql,
		"schema/types/milestone.graphql",
	)
}

func schemaTypesMilestoneGraphql() (*asset, error) {
	bytes, err := schemaTypesMilestoneGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/milestone.graphql", size: 309, mode: os.FileMode(420), modTime: time.Unix(1585101161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesPaginationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x48\x4c\x4f\xf5\xcc\x4b\xcb\x57\xa8\xe6\x52\x50\x28\x2e\x49\x2c\x2a\x71\x2e\x2d\x2a\xce\x2f\xb2\x52\x08\x2e\x29\xca\xcc\x4b\xe7\x52\x50\x48\xcd\x4b\xc1\x10\xcb\x48\x2c\xf6\x4b\xad\x28\x01\xe9\xb6\x52\x70\xca\xcf\xcf\x49\x4d\xcc\x53\x84\x88\x07\x14\xa5\x96\x65\xe6\x97\x16\xa3\xc9\xd5\x72\x01\x02\x00\x00\xff\xff\x82\xe4\x59\xe2\x70\x00\x00\x00")

func schemaTypesPaginationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesPaginationGraphql,
		"schema/types/pagination.graphql",
	)
}

func schemaTypesPaginationGraphql() (*asset, error) {
	bytes, err := schemaTypesPaginationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/pagination.graphql", size: 112, mode: os.FileMode(420), modTime: time.Unix(1584779905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesProjectGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6a\x2b\x31\x0c\xbc\xfb\x2b\x26\xe4\xf2\xde\xa5\x1f\xe0\x5b\x48\x4a\xf0\xa1\x10\x68\x7b\x2a\x3d\x6c\xd7\xda\x8d\x4b\x62\x2d\xb6\x96\x50\x4a\xfe\xbd\x58\x59\x27\x4b\x68\x6f\x1e\x49\xa3\xd1\x48\x96\xaf\x81\xb0\x4b\xfc\x49\xad\xe0\xdb\x00\xc1\x5b\xb8\xcd\xc2\x00\xb1\x39\x92\xc5\xb3\xa4\x10\xfb\x82\xf9\x14\x29\x59\xbc\x66\x4a\x05\x7a\xca\x6d\x0a\x83\x04\x8e\xb5\xca\x00\x6d\xa2\x46\xc8\xaf\x64\xce\x3c\x86\x03\x65\xe1\x48\xd9\xe2\xed\xa9\x82\xf7\xa2\x96\xf3\x48\xf9\x5f\x88\xc3\x28\x16\x5b\x12\xa7\x01\x57\xf0\xe2\xbf\x85\xc2\x35\xc7\x48\x6d\x11\x32\x67\x63\xe6\x13\xdf\x32\x3a\x3b\xf9\x5e\x25\xa6\xec\xa3\xef\x55\x24\xb2\x9f\x87\x4b\x68\x68\x7a\x72\xb1\x63\x8b\xdd\xf4\x2a\x73\x0a\x4b\x73\x58\xf3\x18\xc5\xc2\x45\x59\xdc\xcb\x95\x86\x2a\xd4\x8e\x29\x73\xba\x2e\x8a\x3d\xd9\x5a\x53\x38\x4b\xa8\x01\x63\xd4\x17\xd6\xba\x93\x29\xaf\x19\x6d\xb2\xc4\xcb\x9e\xe0\x36\xe0\x0e\xb2\xa7\xcb\x7e\xd1\x71\x52\x14\xe9\x84\xe1\x42\x79\xa8\xcb\x77\x5e\xe7\xba\x72\xcb\x85\x2a\xfb\xae\xfe\xfe\x78\x4b\xac\x90\xf7\x9c\x64\x7e\xb7\x3f\xb8\xbf\x5d\xf6\x5c\xcd\x6c\x49\x26\x27\xf9\x66\xa5\x0b\x29\x4b\x9d\xed\xd0\xdc\xde\x4d\x27\xe5\xcf\x5c\xbf\xc7\x07\x75\x9c\x68\xd6\xf5\x27\x00\x00\xff\xff\x34\x93\x2f\xbb\x80\x02\x00\x00")

func schemaTypesProjectGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesProjectGraphql,
		"schema/types/project.graphql",
	)
}

func schemaTypesProjectGraphql() (*asset, error) {
	bytes, err := schemaTypesProjectGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/project.graphql", size: 640, mode: os.FileMode(420), modTime: time.Unix(1585234910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesUserGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xc8\x31\x0a\xc2\x40\x10\x05\xd0\x7e\x4f\xf1\xd3\xe9\x15\xa6\x55\x90\x74\x82\x78\x80\x10\xbf\x32\xb2\x99\x5d\x66\x67\x0b\x11\xef\x2e\x81\x14\x62\xfb\xe2\x55\x89\x6b\xa3\xe3\x9d\x00\xbd\x09\xc6\xe3\x90\x80\x7b\xcf\xd9\xa6\x85\x82\x4b\xb8\xda\x63\xb5\xde\xe8\xff\xc6\x65\xd2\xfc\x0b\xd5\xcb\x93\x73\xb4\x9d\x5a\xed\x21\x38\x31\xce\x1b\x8d\xab\x0c\x7b\xc1\x06\x87\x62\xc6\x39\xb4\x58\xfa\xa4\x6f\x00\x00\x00\xff\xff\x5e\x0b\xab\xeb\x89\x00\x00\x00")

func schemaTypesUserGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesUserGraphql,
		"schema/types/user.graphql",
	)
}

func schemaTypesUserGraphql() (*asset, error) {
	bytes, err := schemaTypesUserGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/user.graphql", size: 137, mode: os.FileMode(420), modTime: time.Unix(1584779174, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.graphql": schemaSchemaGraphql,
	"schema/types/issue.graphql": schemaTypesIssueGraphql,
	"schema/types/milestone.graphql": schemaTypesMilestoneGraphql,
	"schema/types/pagination.graphql": schemaTypesPaginationGraphql,
	"schema/types/project.graphql": schemaTypesProjectGraphql,
	"schema/types/user.graphql": schemaTypesUserGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
		"types": &bintree{nil, map[string]*bintree{
			"issue.graphql": &bintree{schemaTypesIssueGraphql, map[string]*bintree{}},
			"milestone.graphql": &bintree{schemaTypesMilestoneGraphql, map[string]*bintree{}},
			"pagination.graphql": &bintree{schemaTypesPaginationGraphql, map[string]*bintree{}},
			"project.graphql": &bintree{schemaTypesProjectGraphql, map[string]*bintree{}},
			"user.graphql": &bintree{schemaTypesUserGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

