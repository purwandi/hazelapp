// Code generated by go-bindata.
// sources:
// schema/schema.graphql
// schema/types/issue.graphql
// schema/types/milestone.graphql
// schema/types/project.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xb1\x8e\x83\x30\x0c\x86\xf7\x3c\x85\xd1\x2d\xf0\x0a\x59\xef\xa4\x13\x03\x52\x3b\x74\xaa\x3a\x20\xb0\xd4\x54\x25\x49\x89\x33\xa0\x8a\x77\xaf\x70\x88\x61\xa0\x53\xe2\xff\xf7\x97\x7c\xa1\xbb\xe3\xd0\xc2\x5b\x01\xbc\x22\x8e\x93\x86\xf3\x72\x28\x80\x21\x52\x4b\xc6\x59\x0d\xcd\x7a\x53\xb3\x52\x34\x79\x4c\x2b\xcc\xfc\x80\x1f\xdd\x03\x3b\x0a\x65\xa5\xe1\x94\xee\xbf\xce\x5a\xec\x16\xa2\xd8\xaf\x94\xa6\xd7\x50\xff\x15\xdb\x62\xaa\x07\xf3\xc4\x40\xce\x62\x28\x8d\xf5\x91\x34\xfc\x23\x35\x39\xe4\xbf\xea\x25\xaf\xe0\x2a\xe9\x4d\x5c\xb2\x1c\xeb\x64\x81\x11\x5b\xc2\xfc\x5a\x9a\xd6\x8a\x5f\xda\x29\xb0\x41\x1d\x42\xc4\x23\x88\x0b\x41\x78\xda\x80\x8b\xef\x77\x40\x9a\xbe\x01\x22\x7e\xf4\x8b\x94\x02\x4a\xa2\x66\xf5\x09\x00\x00\xff\xff\x16\x37\x4d\x75\xa2\x01\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 418, mode: os.FileMode(420), modTime: time.Unix(1582990250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesIssueGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x4e\xf3\x30\x10\x85\xf7\x3e\xc5\xfb\xf5\xef\x73\x80\xec\xaa\xa6\x0b\x4b\x88\x22\x05\x0e\x90\xc6\x53\x32\x28\xd8\x96\x67\xb2\x88\x50\xef\x8e\x6c\x0b\x1a\xa0\x0b\xc4\x6e\x32\x79\xe3\xf7\xcd\x1b\x5d\x23\xc1\x8a\x2c\x84\x37\x03\xb0\x6b\x61\xbb\x7f\xb9\x2a\xa5\xd7\x5c\x2b\xeb\x4c\x2d\x7a\x4d\xec\x9f\x73\xe3\x14\xdc\xba\xfd\x1e\x13\x0d\x4a\x6e\xa7\xd7\xe6\xc5\x18\xf2\xcb\x6b\x7d\xbb\xd7\x41\xab\xc1\x7f\xec\x3c\xb8\xf8\xe9\x34\x28\x58\x20\xca\xf3\x8c\x10\xc9\x1b\xe0\xf8\x70\xb8\xbf\x21\x9b\x06\xc1\x89\xc8\x63\x9c\x83\x90\x33\xc0\xfe\xee\xd8\x1f\xba\x6c\xc3\x3e\x2e\x8a\x7d\x41\x28\x6e\xb6\x34\xaa\xdb\xe3\x44\x88\x29\xbc\xd0\xa8\xb0\x1d\xc2\x19\x3a\x11\x12\xc5\x20\xac\x21\xad\x8d\xc1\xc7\x7f\xfb\xb9\x7b\x1d\x2b\x5b\xe3\x1c\x52\x19\x29\x30\xcd\xad\x30\xaa\x3a\x47\xf2\x55\x0c\x47\x32\x26\x8e\xca\xc1\x37\xdf\x42\xbb\x72\x3f\x45\xf7\x93\x7b\x1b\xfe\xef\x61\xfe\xca\x02\x48\xbe\x4f\xbb\xb9\x95\xb9\x98\xf7\x00\x00\x00\xff\xff\x0a\x10\x07\x40\x1a\x02\x00\x00")

func schemaTypesIssueGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesIssueGraphql,
		"schema/types/issue.graphql",
	)
}

func schemaTypesIssueGraphql() (*asset, error) {
	bytes, err := schemaTypesIssueGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/issue.graphql", size: 538, mode: os.FileMode(420), modTime: time.Unix(1582451082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesMilestoneGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xcc\xb1\x0a\xc2\x50\x0c\x85\xe1\x3d\x4f\x71\x7c\x8d\xae\x0a\x72\x07\x07\xf1\x09\x4a\xef\x41\x22\x9a\x1b\xd2\x74\x28\xc5\x77\x17\x05\xdb\xc5\xd1\x31\x3f\x39\x5f\xce\x4e\x9c\xf4\xce\x31\x9b\x11\x8b\x00\x5a\x3b\x94\xc3\x4e\x00\xeb\x1f\xec\x70\xc9\x50\xbb\xbe\xef\xca\x71\x08\xf5\xd4\x66\xdf\x2c\x80\x47\xbb\x71\xc8\x52\xb7\xd7\xa7\x88\x9a\x4f\x89\x7d\xb0\x4f\xae\x7e\xf9\xc4\xe5\x2f\xf4\x91\xb9\xba\xe7\x89\x31\x6f\xf8\xcf\xd9\x2b\x00\x00\xff\xff\x96\xce\x27\x33\xea\x00\x00\x00")

func schemaTypesMilestoneGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesMilestoneGraphql,
		"schema/types/milestone.graphql",
	)
}

func schemaTypesMilestoneGraphql() (*asset, error) {
	bytes, err := schemaTypesMilestoneGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/milestone.graphql", size: 234, mode: os.FileMode(420), modTime: time.Unix(1582938477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypesProjectGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x4f\xc3\x40\x0c\x85\x77\xff\x8a\x87\xba\xf3\x03\xb2\x55\x29\x43\x36\x24\xd8\x10\x43\x74\xe7\x26\x87\xc0\x8e\x7c\x8e\x2a\x84\xf2\xdf\xd1\x5d\x9b\x52\x45\x74\xb4\xfd\xbe\xe7\x67\xfb\xf7\xc4\x78\x36\xfd\xe0\xe0\xf8\x21\x20\xc5\x06\xdd\xe1\x81\x00\xe9\xbf\xb8\xc1\x8b\x5b\x92\xa1\xd4\x91\x73\xb0\x34\x79\x52\x59\xdb\x04\x04\xe3\xde\x39\xee\xfd\x4f\xba\x10\x25\x99\x66\x47\x5b\x67\x17\xf7\xae\xb6\xca\x8a\x1d\x5e\x47\x46\x77\x80\x1e\xe1\x23\x43\x4f\xc2\x86\xa3\x5a\xad\x84\x4f\x98\xce\xc8\x23\xe1\x3c\xec\x4a\x28\xf1\x2b\x5b\xa2\xad\xf4\x46\xbf\x4d\xbd\xc3\x1e\x79\x54\xf3\xdb\xfc\x77\xd8\xff\x2e\x5c\x88\x6e\x7f\xd4\xaa\x08\x87\xea\x51\x4e\x71\xf5\xfe\xb3\xd5\x59\xbc\x06\x2c\x0b\x39\x0e\x9c\x1b\xbc\x5d\x80\xa7\x38\xf0\xfb\xd6\xa5\x34\x2b\x1f\x66\xcb\x6a\xd7\x8f\x6b\xe4\x66\xd5\xd0\x42\xbf\x01\x00\x00\xff\xff\x37\x73\x54\xa7\x9d\x01\x00\x00")

func schemaTypesProjectGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypesProjectGraphql,
		"schema/types/project.graphql",
	)
}

func schemaTypesProjectGraphql() (*asset, error) {
	bytes, err := schemaTypesProjectGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/types/project.graphql", size: 413, mode: os.FileMode(420), modTime: time.Unix(1583040162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.graphql": schemaSchemaGraphql,
	"schema/types/issue.graphql": schemaTypesIssueGraphql,
	"schema/types/milestone.graphql": schemaTypesMilestoneGraphql,
	"schema/types/project.graphql": schemaTypesProjectGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
		"types": &bintree{nil, map[string]*bintree{
			"issue.graphql": &bintree{schemaTypesIssueGraphql, map[string]*bintree{}},
			"milestone.graphql": &bintree{schemaTypesMilestoneGraphql, map[string]*bintree{}},
			"project.graphql": &bintree{schemaTypesProjectGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

